module Graph
  use int.Int
  use list.List
  use list.Length
  use list.Mem
  use array.Array

  type t = array (list int)

  let function size (g : t) : int
  = Array.length g

  let function e_size g =
    let rec aux i n =
      requires {i>=0}
      variant{Array.length g - i} 
      if i >= Array.length g then n
      else aux (i+1) (n + Length.length g[i])
    in
    aux 0 0

  let create (n : int ) : t
  requires { n >= 0 }
  ensures { Array.length result = n }
  ensures { forall i. 0 <= i < Array.length result -> result[i] = Nil }
  = Array.make n Nil

  let add_e (g : t) (s1 : int) (s2 : int) : unit
  requires { 
    s1 >= 0 /\ s2 >= 0 /\
    s1 < Array.length g /\ 
    s2 < Array.length g
  }
  ensures {
    forall s: int. 0 <= s < Array.length g -> s <> s1 -> g[s] = (old g)[s]
  }
  ensures {
    g[s1] = (Cons s2 ((old g)[s1]))
  }
  =
    g[s1] <- Cons s2 g[s1]

  predicate safe_neighbours (l: list int)(g: t) = 
    forall e: int. mem e l -> 0 <= e < Array.length g

  predicate safe_graph (g: t) = 
    forall i: int. 0 <= i < Array.length g -> safe_neighbours g[i] g

  let function succ (g : t) (v : int) : list int
  requires { 0 <= v < Array.length g }
  requires { safe_graph g}
  ensures { forall n: int. mem n result -> 0 <= n < Array.length g } 
  ensures { result = g[v] }
  = g[v]

end